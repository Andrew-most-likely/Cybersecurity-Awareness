import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js';import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js';import { getFirestore, doc, getDoc, updateDoc, setDoc, serverTimestamp } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js';// Firebase Configurationconst firebaseConfig = { apiKey: "AIzaSyCgHnpzIhUtno43U3fo6rL51I-OUvyKf3U", authDomain: "learncybersafety.firebaseapp.com", projectId: "learncybersafety", storageBucket: "learncybersafety.firebasestorage.app", messagingSenderId: "793441232155", appId: "1:793441232155:web:32cbcaa870b173f1ee9fbe", measurementId: "G-2LK0NYMBHP"};// Initialize Firebaseconst app = initializeApp(firebaseConfig);const auth = getAuth(app);const db = getFirestore(app);// Check authentication stateonAuthStateChanged(auth, async (user) => { if (user) { console.log('User authenticated:', user.email); // Load user's progress from Firestore try { const userRef = doc(db, "users", user.uid); const docSnap = await getDoc(userRef); if (docSnap.exists()) { const userData = docSnap.data(); if (userData.data) { syncProgressFromFirebase(userData.data); } } } catch (error) { console.error("Error loading user data:", error); } updateHeaderWithUser(user); }});// Function to sync Firebase data with local statefunction syncProgressFromFirebase(firebaseData) { // Sync modules progress if (firebaseData.modules) { firebaseData.modules.forEach(module => { appState.progress[module.id] = module.progress; }); } if (firebaseData.quizzes) { firebaseData.quizzes.forEach(quiz => { quiz.questions?.forEach((q, idx) => { const key = `${quiz.id}-${idx}`; if (q.userAnswer !== null && q.userAnswer !== undefined) { appState.quizAnswers[key] = q.userAnswer; } }); }); } // Sync badges if (firebaseData.badges) { appState.badges = firebaseData.badges; } // Re-render everything with synced data renderModules(); updateStatsWidget(); updateProgressView(); renderAchievements();}export async function saveProgressToFirebase() { const user = auth.currentUser; if (!user) return; try { const userRef = doc(db, "users", user.uid); // Ensure MODULES and QUIZZES arrays exist if (!Array.isArray(MODULES) || !Array.isArray(QUIZZES)) { console.error("MODULES or QUIZZES not defined"); return; } const data = { badges: appState.badges || [], exportDate: new Date().toISOString(), // ✅ MODULES: make sure total is read correctly modules: MODULES.map(m => { const total = Number(m.total) || 0; const progress = appState.progress?.[m.id] || 0; const percentComplete = total > 0 ? Math.round((progress / total) * 100) : 0; return { id: m.id, title: m.title, total, progress, percentComplete, }; }), // ✅ QUIZZES: maintain nested "questions" format quizzes: QUIZZES.map(q => { const questions = q.questions.map((question, i) => { const key = `${q.id}-${i}`; return { userAnswer: appState.quizAnswers[key] ?? null }; }); const answered = questions.filter(q => q.userAnswer !== null).length; const correct = q.questions.reduce((count, question, i) => { const key = `${q.id}-${i}`; const userAnswer = appState.quizAnswers[key]; return count + (userAnswer === question.correct ? 1 : 0); }, 0); return { id: q.id, title: q.title, total: q.questions.length, answered, correct, score: answered ? Math.round((correct / answered) * 100) : 0, questions, }; }), // ✅ SUMMARY: accurate completion count summary: { modulesCompleted: MODULES.filter( m => (appState.progress?.[m.id] || 0) >= m.total ).length, totalModules: MODULES.length, badgesEarned: appState.badges?.length || 0, totalBadges: ACHIEVEMENTS?.length || 0, }, // ✅ User info inside `data(map)` email: user.email || "", name: user.displayName || "", lastLogin: serverTimestamp(), // Firestore timestamp }; await setDoc(userRef, { data }, { merge: true }); console.log("✅ User progress saved in correct format"); } catch (error) { console.error("❌ Error saving progress:", error); }}setInterval(saveProgressToFirebase, 30000);window.addEventListener('beforeunload', saveProgressToFirebase);function updateHeaderWithUser(user) { const controls = document.querySelector('.controls'); if (loginBtn) { loginBtn.remove();} // Add user info and sign out button at the beginning const userInfoHTML = ` <div style="display: flex; align-items: center; gap: 12px; padding: 8px 12px; background: rgba(255,255,255,0.05); border-radius: 8px;"> <div style="text-align: right;"> <div style="font-size: 0.85rem; font-weight: 600;">${user.displayName || 'User'}</div> <div style="font-size: 0.75rem; color: var(--muted);">${user.email}</div> </div> </div> <button id="signOutBtn" class="ghost" title="Sign Out" style="background: rgba(239, 68, 68, 0.1); border-color: var(--danger);"> Sign Out </button> `; controls.insertAdjacentHTML('afterbegin', userInfoHTML); const signOutBtn = document.getElementById('signOutBtn'); const signOutModal = document.getElementById('signOutModal'); const confirmSignOut = document.getElementById('confirmSignOut'); const cancelSignOut = document.getElementById('cancelSignOut'); signOutBtn.addEventListener('click', () => { signOutModal.style.display = 'flex'; }); cancelSignOut.addEventListener('click', () => { signOutModal.style.display = 'none'; }); confirmSignOut.addEventListener('click', async () => { signOutModal.style.display = 'none'; await saveProgressToFirebase(); await signOut(auth); window.location.href = 'login.html'; }); signOutModal.addEventListener('click', e => { if (e.target === signOutModal) signOutModal.style.display = 'none'; });}// Override markModuleCompleted to save to Firebaseconst originalMarkModuleCompleted = window.markModuleCompleted || markModuleCompleted;window.markModuleCompleted = async function(id) { originalMarkModuleCompleted(id); await saveProgressToFirebase();};// Expose Firebase auth methods globallywindow.firebaseAuth = { saveProgress: saveProgressToFirebase, getCurrentUser: () => auth.currentUser};function requireAuthRedirect(e) { const user = auth.currentUser; const target = e.currentTarget; if (target.classList.contains('splash-button') || target.id === 'scrollTopBtn') { return; } if (!user) { e.preventDefault(); window.location.href = 'login.html'; }}document.querySelectorAll('button.ghost,button.btn , a.module-link').forEach(button => { button.addEventListener('click', requireAuthRedirect);});document.querySelectorAll('a.active, a.quizzes, a.achievements, a.progress').forEach(link => {// link.addEventListener('click', requireAuthRedirect);});const loginURL = 'login.html';// Sections to hideconst idsToHide = [ 'modulesSection', 'quizzesSection', 'toolsSection', 'achievementsSection', 'progressSection'];function updateHiddenElements(user) { const mainCard = document.querySelector('.main-card'); const overlay = mainCard.querySelector('.overlay'); if (user) { mainCard.classList.remove('hidden'); if (overlay) overlay.style.display = 'none'; } else { mainCard.classList.add('hidden'); if (overlay) { overlay.style.display = 'flex'; overlay.onclick = () => window.location.href = loginURL; // redirect to login } }}// Listen for Firebase auth stateauth.onAuthStateChanged(user => { updateHiddenElements(user);});